{"version":3,"sources":["api.timer.js"],"names":["window","jQuery","ApiTimer","$","tm","settings","cookieName","maxTimerMinutes","intervalMinutes","debug","onStart","onComplete","onStop","onIStop","onIComplete","onIStart","init","options","extend","timer","interval","logger","message","console","log","timerComplete","elapsedTime","intervalComplete","onTimerComplete","callback","onTimerStart","onTimerStop","onIntervalComplete","onIntervalStart","onIntervalStop","startDateCookieValue","name","nameEQ","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","getCookie","dateTimeDiff","Date","minutesElapsed","Math","round","ajaxCall","ajaxOptions","url","ajax","async","dataType","type","cache","crossDomain","traditional","Deferred","reject","stopTimer","clearTimeout","stopInterval","clearInterval","runTimer","value","days","expires","date","setTime","getTime","toUTCString","setCookie","setTimeout","runInterval","setInterval","warn"],"mappings":"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","file":"api.timer.min.js","sourcesContent":["if(window.jQuery) {\r\n    /**\r\n     * ApiTimer\r\n     * @module ApiTimer\r\n     * @version 1.0.0\r\n     * @author Matthew Wright\r\n     * @description ApiTimer is a general use interval and timeout timer that includes cookie, ajax call, and debug mode.\r\n     * @requires jQuery 1.5+\r\n     * @returns {object}\r\n     */\r\n    var ApiTimer = (function ($) {\r\n        'use strict';\r\n\r\n        var tm = {};\r\n\r\n        var settings = {\r\n            cookieName: 'API Timer',\r\n            maxTimerMinutes: 15,\r\n            intervalMinutes: 1,\r\n            debug: false,\r\n            onStart: null,\r\n            onComplete: null,\r\n            onStop: null,\r\n            onIStop: null,\r\n            onIComplete: null,\r\n            onIStart: null\r\n        };\r\n\r\n        /**\r\n         * This function is the constructor for ApiTimer\r\n         * @function init\r\n         * @static\r\n         * @param {object} options - Constructor options for API Timer\r\n         * @param {any} options.timer - Timeout\r\n         * @param {any} options.interval - Interval\r\n         * @param {string} options.cookieName - Cookie name\r\n         * @param {int} options.maxTimerMinutes - Timer minutes\r\n         * @param {int} options.intervalMinutes - Interval minutes\r\n         * @param {bool} options.debug - Shows logging\r\n         * @param {function} options.onStart - Function to trigger when timer begins\r\n         * @param {function} options.onComplete - Function to trigger when the timer completes\r\n         * @param {function} options.onStop - Function to trigger when the timer stops\r\n         * @param {function} options.onIStart - Function to trigger when the interval starts\r\n         * @param {function} options.onIComplete - Function to trigger when the interval completes a cycle\r\n         * @param {function} options.onIStop - Function to trigger when the interval stops\r\n         */\r\n        tm.init = function (options) {\r\n            if (options) {\r\n                $.extend(settings, options);\r\n            }\r\n\r\n            tm.timer = null;\r\n            tm.interval = null;\r\n            tm.cookieName = settings.cookieName;\r\n            tm.maxTimerMinutes = settings.maxTimerMinutes;\r\n            tm.intervalMinutes = settings.intervalMinutes;\r\n            tm.debug = settings.debug;\r\n            tm.onStart = settings.onStart;\r\n            tm.onComplete = settings.onComplete;\r\n            tm.onStop = settings.onStop;\r\n            tm.onIStart = settings.onIStart;\r\n            tm.onIComplete = settings.onIComplete;\r\n            tm.onIStop = settings.onIStop;\r\n        };\r\n\r\n        var logger = function (message) {\r\n            if (tm.debug) {\r\n                console.log(message);\r\n            }\r\n        };\r\n\r\n        var setCookie = function (name, value, days) {\r\n            var expires = '';\r\n            if (days) {\r\n                var date = new Date();\r\n                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n                expires = '; expires=' + date.toUTCString();\r\n            }\r\n            document.cookie = name + '=' + (value || '') + expires + '; path=/';\r\n        };\r\n\r\n        var getCookie = function (name) {\r\n            var nameEQ = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                while (c.charAt(0) == ' ') {\r\n                    c = c.substring(1, c.length);\r\n                }\r\n                if (c.indexOf(nameEQ) == 0) {\r\n                    return c.substring(nameEQ.length, c.length);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        var timerComplete = function () {\r\n            if (tm.onComplete) {\r\n                return tm.onComplete();\r\n            } else {\r\n                logger('Timer Expired: ' + tm.elapsedTime() + ' minutes have passed.');\r\n            }\r\n        };\r\n\r\n        var intervalComplete = function () {\r\n            if (tm.onIComplete) {\r\n                return tm.onIComplete();\r\n            } else {\r\n                logger('Interval Complete');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the timer complete function\r\n         * @function onTimerComplete\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onTimerComplete = function (callback) {\r\n            tm.onComplete = callback;\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the timer start function\r\n         * @function onTimerStart\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onTimerStart = function (callback) {\r\n            tm.onStart = callback;\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the timer stop function\r\n         * @function onTimerStop\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onTimerStop = function (callback) {\r\n            tm.onStop = callback;\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the interval complete function\r\n         * @function onIntervalComplete\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onIntervalComplete = function (callback) {\r\n            tm.onIComplete = callback;\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the interval start function\r\n         * @function onIntervalStart\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onIntervalStart = function (callback) {\r\n            tm.onIStart = callback;\r\n        };\r\n\r\n        /**\r\n         * Sets the callback for the interval stop function\r\n         * @function onIntervalStop\r\n         * @static\r\n         * @param callback\r\n         */\r\n        tm.onIntervalStop = function (callback) {\r\n            tm.onIStop = callback;\r\n        };\r\n\r\n        /**\r\n         * Return the minutes that have elapsed between the current DateTime and the stored cookie DateTime\r\n         * @function elapsedTime\r\n         * @static\r\n         * @returns {number} - The minutes that have elapsed\r\n         */\r\n        tm.elapsedTime = function () {\r\n            var startDateCookieValue = getCookie(tm.cookieName);\r\n            if (startDateCookieValue) {\r\n                var endDateTime = new Date();\r\n                var dateTimeDiff = (endDateTime - new Date(startDateCookieValue));\r\n                dateTimeDiff /= 1000;\r\n                dateTimeDiff /= 60;\r\n                // return minutes elapsed\r\n                var minutesElapsed = Math.round(dateTimeDiff);\r\n                logger('Time Elapsed (minutes): ' + minutesElapsed);\r\n                return minutesElapsed;\r\n            } else {\r\n                logger('No cookie was set.');\r\n                return 0;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Makes an ajax call with the specified parameters\r\n         * @function ajaxCall\r\n         * @static\r\n         * @param ajaxOptions - The options that can be passed to override the default ajax call options\r\n         * @param ajaxOptions.url - The api endpoint or desired url\r\n         * @param ajaxOptions.async - Whether to use async or not\r\n         * @param ajaxOptions.dataType - Specifies the return type\r\n         * @param ajaxOptions.type - The http method, i.e. POST, GET, DELETE, PUT\r\n         * @param ajaxOptions.cache - Whether to cache the call or not\r\n         * @param ajaxOptions.crossDomain - Whether to use cross domain support\r\n         * @param ajaxOptions.traditional - Switches traditional serialization on\r\n         * @returns {Promise<never>|*|{getAllResponseHeaders, abort, setRequestHeader, readyState, getResponseHeader, overrideMimeType, statusCode}}\r\n         */\r\n        tm.ajaxCall = function (ajaxOptions) {\r\n            if (ajaxOptions && ajaxOptions.url) {\r\n                return $.ajax({\r\n                    url: ajaxOptions.url,\r\n                    async: ajaxOptions.async || true,\r\n                    dataType: ajaxOptions.dataType || 'json',\r\n                    type: ajaxOptions.type || 'POST',\r\n                    cache: ajaxOptions.cache || false,\r\n                    crossDomain: ajaxOptions.crossDomain || false,\r\n                    traditional: ajaxOptions.traditional || false\r\n                });\r\n            }\r\n\r\n            return $.Deferred().reject('An API url is required.');\r\n        };\r\n\r\n        /**\r\n         * Stops the timeout timer\r\n         * @static\r\n         * @function stopTimer\r\n         */\r\n        tm.stopTimer = function () {\r\n            if (tm.timer) {\r\n                clearTimeout(tm.timer);\r\n                if (tm.onStop) {\r\n                    return tm.onStop();\r\n                }\r\n                logger('Timer Stopped');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stops the interval timer\r\n         * @static\r\n         * @function stopInterval\r\n         */\r\n        tm.stopInterval = function () {\r\n            if (tm.interval) {\r\n                clearInterval(tm.interval);\r\n                if (tm.onIStop) {\r\n                    return tm.onIStop();\r\n                }\r\n                logger('Interal Stopped');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Starts and runs the timeout timer\r\n         * @static\r\n         * @function runTimer\r\n         */\r\n        tm.runTimer = function () {\r\n            tm.stopTimer();\r\n            setCookie(tm.cookieName, new Date(), 1);\r\n            tm.timer = setTimeout(timerComplete, tm.maxTimerMinutes * 60 * 1000);\r\n            if (tm.onStart) {\r\n                return tm.onStart();\r\n            }\r\n            logger('Running Timer');\r\n        };\r\n\r\n        /**\r\n         * Starts and runs the interval timer\r\n         * @static\r\n         * @function runInterval\r\n         */\r\n        tm.runInterval = function () {\r\n            tm.stopInterval();\r\n            tm.interval = setInterval(intervalComplete, tm.intervalMinutes * 60 * 1000);\r\n            if (tm.onIStart) {\r\n                return tm.onIStart();\r\n            }\r\n            logger('Running Interval');\r\n        };\r\n\r\n        return tm;\r\n    })(jQuery);\r\n} else {\r\n    console.warn('jQuery is required for Api Timer. Api Timer was not loaded.');\r\n}\r\n"]}